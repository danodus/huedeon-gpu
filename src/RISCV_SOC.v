
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module RISCV_SOC(
  input                   CLOCK_50,
  input                   CLOCK_PIX,
  input          [3:0]    KEY,
  input          [9:0]    SW,
  output reg     [9:0]    LEDR,
  output         [6:0]    HEX0,
  output         [6:0]    HEX1,
  output         [7:0]    VGA_B,
  output                  VGA_BLANK_N,
  output                  VGA_CLK,
  output         [7:0]    VGA_G,
  output                  VGA_HS,
  output         [7:0]    VGA_R,
  output                  VGA_SYNC_N,
  output                  VGA_VS
);

  wire vsync;
  reg vsync_status;

  wire reset = ~KEY[0];

  wire [31:0] cpuDataOut;
  wire [31:0] busAddress;
  wire        busWriteEnable;
   
  // MEMORY MAP
  // 0000_0000h - 000F_FFFF ROM 1MB max
  // 0010_0000h - 001F_FFFF RAM 1MB max
  // 0020_0000h - 002F_FFFF VRAM 1MB max
  // 0030_0000h - 003F_FFFF GPU
  // 8000_0000h - 8000_0FFF IO

  wire [1:0] chip   = busAddress[21:20];
  wire io_select    = busAddress[31];
  wire vram_select  = chip == 2'b10;
  wire rom_select   = chip == 2'b00;
  wire ram_select   = chip == 2'b01;
  wire gpu_select   = chip == 2'b11;
  
  
  wire [31:0] ramDataOut;
  wire [31:0] romDataOut;
  wire [31:0] gpuDataOut;
  wire [31:0] vram_rd_data;
  
  wire clk = CLOCK_50;
  reg [31:0] ioDataOut;
  
  wire [31:0] busDataIn = io_select     ? ioDataOut :
                          vram_select   ? vram_rd_data :
                          gpu_select    ? { vsync_status, gpu_status[30:0] } :
                          ram_select    ? ramDataOut :
                          romDataOut;  
   
  always @(posedge clk)
  begin
    vsync_status <= ~vsync;
    if (io_select)
    begin
      if (busWriteEnable)
        LEDR <= { gpu_status[1:0], cpuDataOut[7:0] };
      else
        ioDataOut <= { LEDR, SW };
    end
  end
  
  wire [31:0] fb_display_offset;
  wire [17:0] fb_vram_address;
  wire [15:0] fb_pixel;

  wire [31:0] gpu_status;
  wire        gpu_write_pixel;
  wire [17:0] gpu_raster_address;
  wire [7:0]  gpu_r8;
  wire [7:0]  gpu_g8;
  wire [7:0]  gpu_b8;
  // convert to RGB565
  wire [15:0] gpu_raster_color = ((gpu_b8 >> 3) & 5'h1F) | (((gpu_g8 >> 2) & 6'h3f) << 5) | (((gpu_r8 >> 3) & 5'h1f) << 11);
  wire        gpu_active = gpu_status[0] | gpu_write_pixel;

  // vram sharing
  wire [17:0] soc_vram_address          = gpu_active ? gpu_raster_address : busAddress[31:1];
  wire [15:0] soc_vram_wr_data          = gpu_active ? gpu_raster_color : (busAddress[1] ? cpuDataOut[31:16] : cpuDataOut[15:0]);
  wire        soc_vram_wr_enable        = gpu_active ? gpu_write_pixel : busWriteEnable;
  wire        soc_vram_enable           = gpu_active ? gpu_active : vram_select;
  

  VRAM vram(
    // framebuffer
    .i_a_clk          (CLOCK_PIX),
    .i_a_enable       (1'b1),
    .i_a_address      (fb_vram_address),
    .i_a_write_enable (1'b0),
    .i_a_wr_data      (16'b0),
    .o_a_rd_data      (fb_pixel),

    // gpu
    .i_b_clk          (CLOCK_50),
    .i_b_enable       (soc_vram_enable),
    .i_b_address      (soc_vram_address),
    .i_b_write_enable (soc_vram_wr_enable),
    .i_b_wr_data      (soc_vram_wr_data),
    .o_b_rd_data      (vram_rd_data)
  );
  
  VGAFramebuffer vga_fb(
    .i_clk            (CLOCK_PIX),
    .i_pixel          (fb_pixel),
    .i_display_offset (fb_display_offset),
    .o_address        (fb_vram_address),
    .o_vga_r          (VGA_R),
    .o_vga_g          (VGA_G),
    .o_vga_b          (VGA_B),
    .o_vga_blank_n    (VGA_BLANK_N),
    .o_vga_sync_n     (VGA_SYNC_N),
    .o_vga_hs         (VGA_HS),
    .o_vga_vs         (vsync)
  );
  assign VGA_VS = vsync;

  HuedeonGPU huedeon_gpu(
    .i_clk              (clk),
    .i_reset            (reset),
    .i_enable           (1'b1),
    .i_chip_select      (gpu_select),
    .i_wr_address       (busAddress[15:2]),
    .i_wr_data          (cpuDataOut),
    .i_wr_enable        (busWriteEnable),
    .o_status           (gpu_status),
    .o_wr_enable        (gpu_write_pixel),
    .o_wr_address       (gpu_raster_address),
    .o_r                (gpu_r8),
    .o_g                (gpu_g8),
    .o_b                (gpu_b8),
    .o_display_offset   (fb_display_offset)
  );
  
  ROM rom(
    .clk          (clk),
    .enable       (rom_select),
    .address      ({ 12'b0, busAddress[19:0] }),
    .dataIn       (cpuDataOut),
    .dataOut      (romDataOut)
  );
 
  RAM ram(
    .clk          (clk),
    .enable       (ram_select),
    .address      ({ 12'b0, busAddress[19:0] }),
    .dataIn       (cpuDataOut),
    .writeEnable  (busWriteEnable),
    .dataOut      (ramDataOut)
  );
      
  RISCV cpu(
    .clk          (clk),
    .reset        (reset),
    .dataIn       (busDataIn),
    .dataOut      (cpuDataOut),
    .address      (busAddress),
    .writeEnable  (busWriteEnable)
  );



endmodule
